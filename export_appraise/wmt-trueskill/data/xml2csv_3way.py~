#!/usr/bin/env python
#encoding: utf-8
#
#
# Based on xml2csv.py. This script is adapted to process 3-way rankings (A<B, A=B, A>B)
#
# CHANGELOG
# 20151009 Created (forked from xml2csv.py)
#
# This is a script for converting an xml file (from Appraise) into a csv file,
# extracting "pairwise comparisons" for each judgement with allowing multiple 
# systems for one translation.
# If the xml file includes reference as a system, you can exclude it by setting
# EXCLUDE_REF = True (True in default).

# Usage: python fromAppraise.xml
# Output: fromAppraise.csv

EXCLUDE_REF = True
N = 2 # extracting pairwise judgements

import sys
import os
import csv 
import itertools
import xml.etree.ElementTree as ET
from collections import Counter



xmlPath = sys.argv[1]

# we replace xml tags "3-way-ranking-result" and "3-way-ranking-item" (to "ranking-result" and "ranking-item") as the XML parser does not accept tags that start with a number
with open (xmlPath, "r") as myfile:
    xmlData=myfile.read().replace("3-way-", "")

csvPath = xmlPath.split('.xml')[0] + '.csv'
csvFile = open(csvPath, 'w')
#elem = ET.parse(xmlPath).getroot()
elem = ET.fromstring(xmlData)
rankings = elem.findall(".//ranking-item")


for j, ranking in enumerate(rankings):
    csv_row = {}
    csv_row['srclang'] = '-1'
    csv_row['trglang'] = '-1'
    csv_row['documentId'] = '-1'
    csv_row['segmentId'] = ranking.attrib['id']
    csv_row['judgeID'] = ranking.attrib['user']
    csv_row['srcIndex'] = ranking.attrib['id']
    for x in range(2):
        systemID = "system{}Id".format(str(x+1))
        systemNumber = "system{}Number".format(str(x+1))
        systemRank = "system{}rank".format(str(x+1))
        csv_row[systemID] = ''
        csv_row[systemNumber] = ''
        csv_row[systemRank] = ''
    writer = csv.DictWriter(csvFile, fieldnames=csv_row.keys())
    if j == 0:
        writer.writerow(dict( (n,n) for n in csv_row.keys() ))


    if 'skipped' in ranking.attrib:
        print "Contributor ", ranking.attrib['user'], "skipped segment ID ", ranking.attrib['id']
        continue

    if ranking.attrib['result'] == "A<B":
        csv_row["system1rank"] = '2'
        csv_row["system2rank"] = '1'
    elif ranking.attrib['result'] == "A>B":
        csv_row["system1rank"] = '1'
        csv_row["system2rank"] = '2'
    else:
        csv_row["system1rank"] = '1'
        csv_row["system2rank"] = '1'
    csv_row["system1Id"] = "system1"
    csv_row["system2Id"] = "system2"		
    csv_row["system1Number"] = '-1'
    csv_row["system2Number"] = '-1'


    writer = csv.DictWriter(csvFile, fieldnames=csv_row.keys())
    writer.writerow(csv_row)

csvFile.close()
